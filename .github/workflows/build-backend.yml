name: Build, Lint, and Push Docker Image

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  clippy:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    env:
      CARGO_TERM_COLOR: always
      RUST_VERSION: stable

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Restore Cargo cache
        uses: actions/cache@v4
        with:
          path: |
            backend/target
            ~/.cargo/registry
            ~/.cargo/git
          key: rust-${{ hashFiles('backend/Cargo.lock') }}
          restore-keys: pr-rust-

      - name: Run cargo clippy
        working-directory: backend
        run: cargo clippy --all-targets --all-features -- -D warnings

  build:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    env:
      CARGO_TERM_COLOR: always
      RUST_VERSION: stable
      IMAGE_NAME: ghcr.io/${{ github.repository }}:latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Restore Cargo cache
        uses: actions/cache@v4
        with:
          path: |
            backend/target
            ~/.cargo/registry
            ~/.cargo/git
          key: rust-${{ hashFiles('backend/Cargo.lock') }}
          restore-keys: rust-

      - name: Build project
        working-directory: backend
        run: cargo build --release

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: ${{ env.IMAGE_NAME }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}-cache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}-cache,mode=max
