/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return user object */
        get: operations["get_user"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/account/avatar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Generate presigned url to upload avatar */
        put: operations["upload_avatar"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/account/ctfd": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Check if user is registered in `CTFd` */
        get: operations["check_ctfd"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/account/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List accounts with public data and attributes (admin only)
         * @description List all accounts. Limit <= 20.
         */
        get: operations["list_accounts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/account/{user_email}/ctfd-data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return user attributes (for `CTFd` integration) */
        get: operations["get_user_ctfd_data"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/account/{user_id}/attributes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return user attributes (only for admins) */
        get: operations["get_user_attributes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Upsert attributes to user (only for admins) */
        patch: operations["upsert_user_attributes"];
        trace?: never;
    };
    "/account/{user_id}/attributes/{key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete attribute from user (only for admins) */
        delete: operations["delete_user_attribute"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/account/{user_id}/role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update a user's role (admin only) */
        patch: operations["update_user_role"];
        trace?: never;
    };
    "/auth/logout-all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Invalidate all refresh tokens */
        post: operations["logout_all"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout-session/{jti}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Revoke refresh token with jti passed to path parameters */
        post: operations["logout_session"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Return new access and refresh tokens */
        post: operations["refresh"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return information for all active sessions (refresh tokens) */
        get: operations["get_sessions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/basic/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login user with email and password */
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/basic/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register a new user using email, username and password */
        post: operations["register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/courses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all courses */
        get: operations["get_all_courses"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/courses/new": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new course */
        post: operations["create_course"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/courses/{course_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get course by id */
        get: operations["get_course_by_id"];
        /** Edit an existing course */
        put: operations["edit_course"];
        post?: never;
        /** Delete an existing course */
        delete: operations["delete_course"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/courses/{course_id}/topics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves all topics associated with a specific course. */
        get: operations["get_all_topics_in_course"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/exam/new": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create new exam */
        post: operations["create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/exam/{exam_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get exam by id */
        get: operations["get_by_id"];
        /** Update exam by id */
        put: operations["update_exam"];
        post?: never;
        /** Delete exam by id */
        delete: operations["delete_exam"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/exam/{exam_id}/attempt/last": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get last attempt */
        get: operations["get_last_attempt"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/exam/{exam_id}/attempt/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user attempts for exam */
        get: operations["get_user_exam_attempts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/exam/{exam_id}/attempt/patch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Change answer for an active attempt */
        patch: operations["patch_attempt"];
        trace?: never;
    };
    "/exam/{exam_id}/attempt/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Start new attempt */
        post: operations["start_new_attempt"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/exam/{exam_id}/attempt/stop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Stop active attempt */
        post: operations["stop_attempt"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/exam/{exam_id}/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get exam tasks (only with active attempt or if exam scores are available or if admin) */
        get: operations["get_tasks"];
        /** Update exam's tasks by id */
        put: operations["update_exam_tasks"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth/github/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Callback for github oauth provider */
        get: operations["callback"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth/github/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Redirect user to github oauth login page */
        get: operations["login"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth/yandex/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Callback for yandex oauth provider */
        get: operations["callback"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth/yandex/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Redirect user to yandex oauth login page */
        get: operations["login"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/task/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List tasks
         * @description List all tasks. Limit <= 20.
         */
        get: operations["list_tasks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/task/new": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create new task */
        post: operations["create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/task/{task_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get task by id */
        get: operations["get_by_id"];
        /** Update task by id */
        put: operations["update_task"];
        post?: never;
        /** Delete task by id */
        delete: operations["delete_task"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/task/{task_id}/admin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get task by id (admin view) */
        get: operations["get_by_id_admin"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/topics/new": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Adds a new topic to a course. */
        post: operations["add_topic_to_course"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/topics/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific topic by its ID. */
        get: operations["get_topic_by_id"];
        /** Updates a topic by its ID. */
        put: operations["update_topic"];
        post?: never;
        /** Deletes a topic by its ID. */
        delete: operations["delete_topic"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/topics/{topic_id}/exams": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get topic exams */
        get: operations["get_exams"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/video/new": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Creates new video entity and return TUS url for uploading */
        post: operations["create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/video/{video_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return video player url by video id */
        get: operations["get_video_url"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AttributeFilter: {
            content: {
                key: string;
                op: components["schemas"]["ConditionOp"];
                value: unknown;
            };
            /** @enum {string} */
            type: "Condition";
        } | {
            content: components["schemas"]["AttributeFilter"][];
            /** @enum {string} */
            type: "And";
        } | {
            content: components["schemas"]["AttributeFilter"][];
            /** @enum {string} */
            type: "Or";
        };
        AvatarUploadResponse: {
            fields: {
                [key: string]: string;
            };
            url: string;
        };
        BasicLoginRequest: {
            /** @example Password123 */
            password: string;
            /** @example John Doe */
            username: string;
        };
        BasicLoginResponse: {
            access_token: string;
        };
        BasicRegisterRequest: {
            /** @example john@example.com */
            email: string;
            /** @example Password123 */
            password: string;
            /** @example John Doe */
            username: string;
        };
        BasicRegisterResponse: {
            access_token: string;
        };
        /** @enum {string} */
        ConditionOp: "eq" | "neq" | "gt" | "gte" | "lt" | "lte" | "in" | "nin";
        CreateExamResponseDTO: {
            /** Format: uuid */
            id: string;
        };
        CreateTaskResponseDTO: {
            /** Format: int64 */
            id: number;
        };
        CreateVideoRequestDTO: {
            name: string;
            /** Format: int64 */
            size: number;
        };
        CreateVideoResponseDTO: {
            url: string;
        };
        CtfdAccountData: {
            active_attempt_task_ids: number[];
            attributes: components["schemas"]["HashMap"];
        };
        CtfdStatus: {
            status: boolean;
        };
        Exam: {
            description?: string | null;
            /** Format: int32 */
            duration: number;
            /** Format: date-time */
            ends_at?: string | null;
            /** Format: uuid */
            id: string;
            name: string;
            /** Format: date-time */
            starts_at?: string | null;
            /** Format: int32 */
            topic_id: number;
            /** Format: int32 */
            tries_count: number;
            type: components["schemas"]["ExamType"];
        };
        ExamAnswer: {
            answers: {
                [key: string]: components["schemas"]["TaskAnswer"];
            };
        };
        ExamAttemptSchema: {
            active: boolean;
            answer_data: components["schemas"]["ExamAnswer"];
            /** Format: uuid */
            exam_id: string;
            /** Format: uuid */
            id: string;
            /** Format: int64 */
            max_score: number;
            /** Format: double */
            score?: number | null;
            scoring_data?: null | components["schemas"]["ScoringData"];
            /** Format: date-time */
            started_at: string;
            /** Format: uuid */
            user_id: string;
        };
        ExamAttemptsListDTO: {
            attempts: components["schemas"]["ExamAttemptSchema"][];
            /** Format: int64 */
            attempts_left: number;
            ran_out_of_attempts: boolean;
        };
        /** @enum {string} */
        ExamType: "Instant" | "Delayed";
        GetUserResponseDTO: {
            email: string;
            /** Format: uuid */
            id: string;
            role: components["schemas"]["UserRole"];
            username: string;
        };
        GetVideoUrlResponseDTO: {
            url: string;
        };
        HashMap: {
            [key: string]: string;
        };
        PublicAccountDTO: {
            attributes: components["schemas"]["HashMap"];
            email: string;
            /** Format: uuid */
            id: string;
            role: components["schemas"]["UserRole"];
            username: string;
        };
        PublicTaskConfig: {
            /** @enum {string} */
            name: "single_choice";
            options: string[];
        } | {
            /** @enum {string} */
            name: "multiple_choice";
            options: string[];
            partial_score: boolean;
        } | {
            max_chars_count: number;
            /** @enum {string} */
            name: "short_text";
        } | {
            max_chars_count: number;
            /** @enum {string} */
            name: "long_text";
        } | {
            items: string[];
            /** @enum {string} */
            name: "ordering";
        } | {
            max_size: number;
            /** @enum {string} */
            name: "file_upload";
        } | {
            /** @enum {string} */
            name: "ctfd";
            task_id: number;
        };
        PublicTaskDTO: {
            configuration: components["schemas"]["PublicTaskConfig"];
            description?: string | null;
            /** Format: int64 */
            id: number;
            /** Format: int64 */
            points: number;
            task_type: components["schemas"]["TaskType"];
            title: string;
        };
        RefreshResponse: {
            access_token: string;
        };
        ScoringData: {
            results: {
                [key: string]: components["schemas"]["TaskVerdict"];
            };
            show_results: boolean;
        };
        SessionInfo: {
            device_id: string;
            is_current: boolean;
            /** Format: date-time */
            issued_at: string;
            /** Format: uuid */
            jti: string;
            /** Format: date-time */
            last_used: string;
        };
        Task: {
            configuration: components["schemas"]["TaskConfig"];
            description?: string | null;
            /** Format: int64 */
            id: number;
            /** Format: int64 */
            points: number;
            task_type: components["schemas"]["TaskType"];
            title: string;
        };
        TaskAnswer: {
            answer: string;
            /** @enum {string} */
            name: "single_choice";
        } | {
            answers: string[];
            /** @enum {string} */
            name: "multiple_choice";
        } | {
            answer: string;
            /** @enum {string} */
            name: "short_text";
        } | {
            answer: string;
            /** @enum {string} */
            name: "long_text";
        } | {
            answer: string[];
            /** @enum {string} */
            name: "ordering";
        } | {
            /** Format: uuid */
            file_id: string;
            /** @enum {string} */
            name: "file_upload";
        } | {
            /** @enum {string} */
            name: "ctfd";
        };
        TaskAnswerDTO: {
            answer: components["schemas"]["TaskAnswer"];
            task_id: number;
        };
        TaskConfig: {
            correct: number;
            /** @enum {string} */
            name: "single_choice";
            options: string[];
            shuffle: boolean;
        } | {
            correct: number[];
            /** @enum {string} */
            name: "multiple_choice";
            options: string[];
            partial_score: boolean;
            shuffle: boolean;
        } | {
            answers: string[];
            auto_grade: boolean;
            case_sensitive: boolean;
            max_chars_count: number;
            /** @enum {string} */
            name: "short_text";
        } | {
            max_chars_count: number;
            /** @enum {string} */
            name: "long_text";
        } | {
            answers: number[][];
            items: string[];
            /** @enum {string} */
            name: "ordering";
        } | {
            max_size: number;
            /** @enum {string} */
            name: "file_upload";
        } | {
            /** @enum {string} */
            name: "ctfd";
            task_id: number;
        };
        /** @enum {string} */
        TaskType: "SingleChoice" | "MultipleChoice" | "ShortText" | "LongText" | "Ordering" | "FileUpload" | "ctfd";
        TaskVerdict: {
            comment?: string | null;
            /** Format: double */
            max_score: number;
            /** Format: double */
            score: number;
            /** @enum {string} */
            verdict: "full_score";
        } | {
            comment?: string | null;
            /** Format: double */
            max_score: number;
            /** Format: double */
            score: number;
            /** @enum {string} */
            verdict: "partial_score";
        } | {
            comment?: string | null;
            /** Format: double */
            max_score: number;
            /** Format: double */
            score: number;
            /** @enum {string} */
            verdict: "incorrect";
        } | {
            /** @enum {string} */
            verdict: "on_review";
        };
        TopicResponseDTO: {
            /** Format: int32 */
            course_id: number;
            /** Format: int32 */
            id: number;
            /** Format: int32 */
            order_index: number;
            title: string;
        };
        UpdateUserRoleDTO: {
            role: components["schemas"]["UserRole"];
        };
        /** @example {
         *       "access_filter": {
         *         "content": [
         *           {
         *             "content": {
         *               "key": "enrollment_year",
         *               "op": "eq",
         *               "value": "2025"
         *             },
         *             "type": "Condition"
         *           },
         *           {
         *             "content": [
         *               {
         *                 "content": {
         *                   "key": "class",
         *                   "op": "gte",
         *                   "value": 10
         *                 },
         *                 "type": "Condition"
         *               },
         *               {
         *                 "content": {
         *                   "key": "foo",
         *                   "op": "eq",
         *                   "value": "bar"
         *                 },
         *                 "type": "Condition"
         *               }
         *             ],
         *             "type": "Or"
         *           }
         *         ],
         *         "type": "And"
         *       },
         *       "description": "Course description",
         *       "name": "Course name"
         *     } */
        UpsertCourseRequestDTO: {
            access_filter?: null | components["schemas"]["AttributeFilter"];
            description?: string | null;
            name: string;
        };
        UpsertCourseResponseDTO: {
            access_filter?: null | components["schemas"]["AttributeFilter"];
            /** Format: date-time */
            created_at: string;
            description?: string | null;
            /** Format: int32 */
            id: number;
            name: string;
        };
        UpsertExamRequestDTO: {
            description?: string | null;
            /** Format: int32 */
            duration: number;
            /** Format: date-time */
            ends_at?: string | null;
            name: string;
            /** Format: date-time */
            starts_at?: string | null;
            /** Format: int32 */
            topic_id: number;
            /** Format: int32 */
            tries_count: number;
            type: components["schemas"]["ExamType"];
        };
        UpsertTaskRequestDTO: {
            configuration: components["schemas"]["TaskConfig"];
            description?: string | null;
            /** Format: int32 */
            points: number;
            task_type: components["schemas"]["TaskType"];
            title: string;
        };
        UpsertTopicRequestDTO: {
            /** Format: int32 */
            course_id: number;
            /** Format: int32 */
            order_index: number;
            title: string;
        };
        /** @enum {string} */
        UserRole: "Student" | "Teacher" | "Admin";
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_user: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetUserResponseDTO"];
                };
            };
        };
    };
    upload_avatar: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return presigned url to upload avatar */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AvatarUploadResponse"];
                };
            };
        };
    };
    check_ctfd: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CtfdStatus"];
                };
            };
        };
    };
    list_accounts: {
        parameters: {
            query: {
                limit: number;
                offset: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully got accounts list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicAccountDTO"][];
                };
            };
            /** @description No auth data found */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Only admins can list accounts */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_user_ctfd_data: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_email: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CtfdAccountData"];
                };
            };
            /** @description Only admins can view user attributes */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No user was found with that id */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_user_attributes: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HashMap"];
                };
            };
            /** @description Only admins can view user attributes */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No user was found with that id */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    upsert_user_attributes: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["HashMap"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HashMap"];
                };
            };
            /** @description Only admins can update user attributes */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No user found with that ID */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_user_attribute: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: string;
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Attribute deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Only admins can delete user attributes */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No attribute found with that key */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_user_role: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserRoleDTO"];
            };
        };
        responses: {
            /** @description Successfully updated user role */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetUserResponseDTO"];
                };
            };
            /** @description No auth data found */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Only admins can manage user roles */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No user found with that ID */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    logout_all: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description All sessions logged out successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    logout_session: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                jti: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Session logged out successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    refresh: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RefreshResponse"];
                };
            };
            /** @description Invalid or expired refresh token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_sessions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionInfo"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BasicLoginRequest"];
            };
        };
        responses: {
            /** @description Returns access and refresh tokens */
            200: {
                headers: {
                    /** @description Contains the `refresh_token` */
                    "Set-Cookie"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BasicLoginResponse"];
                };
            };
            /** @description Wrong email or password */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BasicRegisterRequest"];
            };
        };
        responses: {
            /** @description Create new user */
            200: {
                headers: {
                    /** @description Contains the `refresh_token` */
                    "Set-Cookie"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BasicRegisterResponse"];
                };
            };
            /** @description User with the same email or name already exists */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_all_courses: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get all courses */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpsertCourseResponseDTO"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    create_course: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpsertCourseRequestDTO"];
            };
        };
        responses: {
            /** @description Create new course */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpsertCourseResponseDTO"];
                };
            };
            /** @description Invalid request body */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User cannot create courses */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_course_by_id: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                course_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get course by id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpsertCourseResponseDTO"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Course not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    edit_course: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                course_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpsertCourseRequestDTO"];
            };
        };
        responses: {
            /** @description Edit course */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpsertCourseResponseDTO"];
                };
            };
            /** @description Invalid request body */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User cannot edit courses */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_course: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                course_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete course */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request body */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User cannot delete courses */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_all_topics_in_course: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                course_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of topics in the course */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TopicResponseDTO"][];
                };
            };
            /** @description Course not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpsertExamRequestDTO"];
            };
        };
        responses: {
            /** @description Returns created exam's id */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateExamResponseDTO"];
                };
            };
            /** @description Wrong data format */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No auth data found */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User has no permission to create exams */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_by_id: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                exam_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found exam */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Exam"];
                };
            };
            /** @description No auth data found */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Exam not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_exam: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                exam_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpsertExamRequestDTO"];
            };
        };
        responses: {
            /** @description Successfully updated exam */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Wrong data format */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No auth data found */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User has no permission to update exam */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Exam not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_exam: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                exam_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted exam */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No auth data found */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User has no permission to delete exam */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Exam not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_last_attempt: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                exam_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully got last attempt */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExamAttemptSchema"];
                };
            };
            /** @description Wrong data format */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No auth data found */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Exam or attempt not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_user_exam_attempts: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                exam_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully got attempts list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExamAttemptsListDTO"];
                };
            };
            /** @description Wrong data format */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No auth data found */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Exam not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    patch_attempt: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                exam_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TaskAnswerDTO"];
            };
        };
        responses: {
            /** @description Successfully patched */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Wrong data format */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No auth data found */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Exam or attempt not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    start_new_attempt: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                exam_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully started new attempt */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExamAttemptSchema"];
                };
            };
            /** @description Wrong data format */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No auth data found */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User has no permission to update exam */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Exam not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User can't start new attempt due to limits or another active attempt or due to exam starts_at/ends_at timespan */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    stop_attempt: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                exam_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully stopped an attempt */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Wrong data format */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No auth data found */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Exam or attempt not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_tasks: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                exam_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully got exam's tasks */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicTaskDTO"][];
                };
            };
            /** @description Wrong data format */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No auth data found */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You have no permission to view tasks */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Exam not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_exam_tasks: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                exam_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": number[];
            };
        };
        responses: {
            /** @description Successfully updated exam's tasks */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Wrong data format */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No auth data found */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User has no permission to update exam */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Exam not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    callback: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    callback: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    list_tasks: {
        parameters: {
            query: {
                limit: number;
                offset: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully got tasks list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No auth data found */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User has no permission to view tasks list */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpsertTaskRequestDTO"];
            };
        };
        responses: {
            /** @description Returns created task's id */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateTaskResponseDTO"];
                };
            };
            /** @description Wrong data format */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No auth data found */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User has no permission to create tasks */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_by_id: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                task_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found task */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicTaskDTO"];
                };
            };
            /** @description No auth data found */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Task not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_task: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                task_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpsertTaskRequestDTO"];
            };
        };
        responses: {
            /** @description Successfully updated task */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Wrong data format */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No auth data found */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User has no permission to update task */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Task not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_task: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                task_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted task */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No auth data found */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User has no permission to delete task */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Task not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_by_id_admin: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                task_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found task */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"];
                };
            };
            /** @description No auth data found */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Task not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    add_topic_to_course: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpsertTopicRequestDTO"];
            };
        };
        responses: {
            /** @description Topic added successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden: User cannot add topics */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Course not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_topic_by_id: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Topic found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TopicResponseDTO"];
                };
            };
            /** @description Topic not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_topic: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpsertTopicRequestDTO"];
            };
        };
        responses: {
            /** @description Topic updated successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden: User cannot update topics */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Topic not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_topic: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Topic deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Topic not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_exams: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                topic_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Exams listed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No auth data */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateVideoRequestDTO"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateVideoResponseDTO"];
                };
            };
            /** @description No auth data found */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User has no permission to upload videos */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_video_url: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                video_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetVideoUrlResponseDTO"];
                };
            };
        };
    };
}
